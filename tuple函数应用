#include<iostream>
#include<vector>
#include<string>
#include<numeric>
#include<tuple>
#include<algorithm>


struct Sales_data;
std::istream& read(std::istream&, Sales_data&);

struct Sales_data
{
	Sales_data() = default;
	Sales_data(const std::string& s) :bookNo(s) {}
	Sales_data(const std::string& s, unsigned n, double p) :bookNo(s), units_sold(n), revenue(n*p) {}

	std::string isbn()  const { return bookNo; }
	Sales_data& combine(Sales_data&);
	Sales_data(std::istream& is) { read(is, *this); }


	std::string bookNo;
	unsigned units_sold = 0;
	double revenue = 0.0;
};



Sales_data& Sales_data::combine(Sales_data& item)
{
	units_sold += item.units_sold;
	revenue += item.revenue;
	return *this;
}


std::istream& read(std::istream& is, Sales_data& item)
{
	double price = 0.0;
	is >> item.bookNo >> item.units_sold >> price;
	item.revenue = item.units_sold*price;
	return is;
}


std::ostream& print(std::ostream& os, const Sales_data& item)
{
	os << item.isbn() << "   " << item.units_sold << "   " << item.revenue;
	return os;
}


Sales_data add(Sales_data& lhs, Sales_data& rhs)
{
	Sales_data sum = lhs;
	sum.combine(rhs);
	return sum;
}


bool compareIsbn(const Sales_data &lhs, const Sales_data &rhs)
{
	return lhs.isbn() < rhs.isbn();
}




typedef std::tuple<std::vector<Sales_data>::size_type,
	std::vector<Sales_data>::const_iterator, std::vector<Sales_data>::const_iterator> matches;

std::vector<matches> findBook(const std::vector<std::vector<Sales_data>> &files, const std::string &book)
{
	std::vector<matches> ret;
	for (auto it = files.cbegin(); it != files.cend(); ++it)
	{
		auto found = std::equal_range(it->cbegin(), it->cend(), book, compareIsbn);
		if (found.first != found.second)
			ret.push_back(std::make_tuple(it - files.cbegin(), found.first, found.second));
	}
	return ret;
}




void reportResults(std::istream& in, std::ostream& os, const std::vector<std::vector<Sales_data>> &files)
{
	std::string s;
	while (in >> s)
	{
		auto trans = findBook(files, s);
		if (trans.empty())
		{
			std::cout << s << " not found in any stores" << std::endl;
			continue;
		}

		for (const auto &store : trans)
			os << "store " << std::get<0>(store) << " sales: " << std::accumulate(std::get<1>(store), std::get<2>(store), Sales_data(s)) << std::endl;
	}
}
